// This file is auto-generated by @hey-api/openapi-ts

export type ChipPlay = {
    chip_name: string;
    num_played: number;
};

export type EntryHistory = {
    event: number;
    points: number;
    total_points: number;
    rank: number;
    rank_sort: number;
    overall_rank: number;
    percentile_rank: number;
    bank: number;
    value: number;
    event_transfers: number;
    event_transfers_cost: number;
    points_on_bench: number;
};

export type Event = {
    id: number;
    name: string;
    deadline_time: Date;
    release_time?: (Date | null);
    average_entry_score: number;
    finished: boolean;
    data_checked: boolean;
    highest_scoring_entry?: (number | null);
    deadline_time_epoch: number;
    deadline_time_game_offset: number;
    highest_score?: (number | null);
    is_previous: boolean;
    is_current: boolean;
    is_next: boolean;
    cup_leagues_created: boolean;
    h2h_ko_matches_created: boolean;
    ranked_count: number;
    chip_plays: Array<ChipPlay>;
    most_selected?: (number | null);
    most_transferred_in?: (number | null);
    top_element?: (number | null);
    top_element_info?: (TopElementInfo | null);
    transfers_made: number;
    most_captained?: (number | null);
    most_vice_captained?: (number | null);
};

export type GoalType = 'points' | 'rank' | 'money';

export const GoalType = {
    POINTS: 'points',
    RANK: 'rank',
    MONEY: 'money'
} as const;

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type League = {
    id: number;
    name: string;
    created: Date;
    closed: boolean;
    max_entries?: (number | null);
    league_type: string;
    scoring: string;
    admin_entry: (number | null);
    start_event: number;
    code_privacy: string;
    has_cup: boolean;
    cup_league?: (number | null);
    rank?: (number | null);
};

export type LeagueCreate = {
    name: string;
    description?: (string | null);
    external_id_fpl: number;
};

export type LeagueData = {
    new_entries: NewEntries;
    last_updated_data: Date;
    league: League;
    standings: Standings;
};

export type LeagueJoin = {
    join_code: string;
};

export type LeagueOut = {
    name: string;
    description?: (string | null);
    external_id_fpl: number;
    id: string;
};

export type LeaguePrizeCreate = {
    total_prize: number;
    prize_type?: (PrizeType);
    prize_goal?: (GoalType);
    from_gw?: (number | null);
    to_gw?: (number | null);
    currency?: string;
    distributions?: Array<PrizeDistributionCreate>;
};

export type LeaguePrizeOut = {
    total_prize: number;
    prize_type?: (PrizeType);
    prize_goal?: (GoalType);
    from_gw?: (number | null);
    to_gw?: (number | null);
    currency?: string;
    id: string;
    distributions?: Array<PrizeDistributionOut>;
};

export type NewEntries = {
    has_next: boolean;
    page: number;
    results: Array<unknown>;
};

export type Pick = {
    element: number;
    position: number;
    multiplier: number;
    is_captain: boolean;
    is_vice_captain: boolean;
};

export type PrizeDistributionCreate = {
    rank?: number;
    percentage?: number;
};

export type PrizeDistributionOut = {
    rank?: number;
    percentage?: number;
    id: string;
};

export type PrizeType = 'total_points' | 'gw_points' | 'cup';

export const PrizeType = {
    TOTAL_POINTS: 'total_points',
    GW_POINTS: 'gw_points',
    CUP: 'cup'
} as const;

export type Standing = {
    id: number;
    event_total: number;
    player_name: string;
    rank: number;
    last_rank: number;
    rank_sort: number;
    total: number;
    entry: number;
    entry_name: string;
};

export type Standings = {
    has_next: boolean;
    page: number;
    results: Array<Standing>;
};

export type TeamData = {
    active_chip?: (string | null);
    automatic_subs?: Array<unknown>;
    entry_history: EntryHistory;
    picks: Array<Pick>;
};

export type TopElementInfo = {
    id: number;
    points: number;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type AuthGetTokenResponse = (unknown);

export type AuthGetTokenError = unknown;

export type FplApiGetClassicLeagueStandingsData = {
    query: {
        league_id: string;
    };
};

export type FplApiGetClassicLeagueStandingsResponse = (LeagueData);

export type FplApiGetClassicLeagueStandingsError = (HTTPValidationError);

export type FplApiGetGameweekPerManagerData = {
    query: {
        gameweek: string;
        team_id: string;
    };
};

export type FplApiGetGameweekPerManagerResponse = (TeamData);

export type FplApiGetGameweekPerManagerError = (HTTPValidationError);

export type FplApiGetGameweekPerManagerPerClassicLeagueData = {
    query: {
        gameweek: string;
        league_id: string;
    };
};

export type FplApiGetGameweekPerManagerPerClassicLeagueResponse = ({
    [key: string]: TeamData;
});

export type FplApiGetGameweekPerManagerPerClassicLeagueError = (HTTPValidationError);

export type FplApiGetOverallGameweekInfoResponse = (Array<Event>);

export type FplApiGetOverallGameweekInfoError = unknown;

export type FplRewardsGetUserLeaguesResponse = (Array<LeagueOut>);

export type FplRewardsGetUserLeaguesError = unknown;

export type FplRewardsCreateLeagueData = {
    body: LeagueCreate;
};

export type FplRewardsCreateLeagueResponse = (LeagueOut);

export type FplRewardsCreateLeagueError = (HTTPValidationError);

export type FplRewardsJoinLeagueData = {
    body: LeagueJoin;
};

export type FplRewardsJoinLeagueResponse = (LeagueOut);

export type FplRewardsJoinLeagueError = (HTTPValidationError);

export type FplPrizesCreatePrizesData = {
    body: LeaguePrizeCreate;
    path: {
        league_id: string;
    };
};

export type FplPrizesCreatePrizesResponse = (LeaguePrizeOut);

export type FplPrizesCreatePrizesError = (HTTPValidationError);

export type FplPrizesGetPrizesData = {
    path: {
        league_id: string;
    };
};

export type FplPrizesGetPrizesResponse = (Array<LeaguePrizeOut>);

export type FplPrizesGetPrizesError = (HTTPValidationError);

export type FplPrizesUpdatePrizeData = {
    body: LeaguePrizeCreate;
    path: {
        league_id: string;
        prize_id: string;
    };
};

export type FplPrizesUpdatePrizeResponse = (LeaguePrizeOut);

export type FplPrizesUpdatePrizeError = (HTTPValidationError);

export type FplPrizesDeletePrizeData = {
    path: {
        league_id: string;
        prize_id: string;
    };
};

export type FplPrizesDeletePrizeResponse = ({
    [key: string]: (string);
});

export type FplPrizesDeletePrizeError = (HTTPValidationError);

export type FplApiGetClassicLeagueStandingsResponseTransformer = (data: any) => Promise<FplApiGetClassicLeagueStandingsResponse>;

export type LeagueDataModelResponseTransformer = (data: any) => LeagueData;

export type LeagueModelResponseTransformer = (data: any) => League;

export const LeagueModelResponseTransformer: LeagueModelResponseTransformer = data => {
    if (data?.created) {
        data.created = new Date(data.created);
    }
    return data;
};

export const LeagueDataModelResponseTransformer: LeagueDataModelResponseTransformer = data => {
    if (data?.last_updated_data) {
        data.last_updated_data = new Date(data.last_updated_data);
    }
    if (data?.league) {
        LeagueModelResponseTransformer(data.league);
    }
    return data;
};

export const FplApiGetClassicLeagueStandingsResponseTransformer: FplApiGetClassicLeagueStandingsResponseTransformer = async (data) => {
    LeagueDataModelResponseTransformer(data);
    return data;
};

export type FplApiGetOverallGameweekInfoResponseTransformer = (data: any) => Promise<FplApiGetOverallGameweekInfoResponse>;

export type EventModelResponseTransformer = (data: any) => Event;

export const EventModelResponseTransformer: EventModelResponseTransformer = data => {
    if (data?.deadline_time) {
        data.deadline_time = new Date(data.deadline_time);
    }
    return data;
};

export const FplApiGetOverallGameweekInfoResponseTransformer: FplApiGetOverallGameweekInfoResponseTransformer = async (data) => {
    if (Array.isArray(data)) {
        data.forEach(EventModelResponseTransformer);
    }
    return data;
};
// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import { type AuthGetTokenError, type AuthGetTokenResponse, type FplApiGetClassicLeagueStandingsData, type FplApiGetClassicLeagueStandingsError, type FplApiGetClassicLeagueStandingsResponse, type FplApiGetGameweekPerManagerData, type FplApiGetGameweekPerManagerError, type FplApiGetGameweekPerManagerResponse, type FplApiGetGameweekPerManagerPerClassicLeagueData, type FplApiGetGameweekPerManagerPerClassicLeagueError, type FplApiGetGameweekPerManagerPerClassicLeagueResponse, type FplApiGetOverallGameweekInfoError, type FplApiGetOverallGameweekInfoResponse, type FplRewardsGetUserLeaguesError, type FplRewardsGetUserLeaguesResponse, type FplRewardsCreateLeagueData, type FplRewardsCreateLeagueError, type FplRewardsCreateLeagueResponse, type FplRewardsJoinLeagueData, type FplRewardsJoinLeagueError, type FplRewardsJoinLeagueResponse, type FplPrizesCreatePrizesData, type FplPrizesCreatePrizesError, type FplPrizesCreatePrizesResponse, type FplPrizesGetPrizesData, type FplPrizesGetPrizesError, type FplPrizesGetPrizesResponse, type FplPrizesUpdatePrizeData, type FplPrizesUpdatePrizeError, type FplPrizesUpdatePrizeResponse, type FplPrizesDeletePrizeData, type FplPrizesDeletePrizeError, type FplPrizesDeletePrizeResponse, FplApiGetClassicLeagueStandingsResponseTransformer, FplApiGetOverallGameweekInfoResponseTransformer } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get Token
 */
export const authGetToken = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<AuthGetTokenResponse, AuthGetTokenError, ThrowOnError>({
    ...options,
    url: '/Token'
}); };

/**
 * Get Classic League Standings
 */
export const fplApiGetClassicLeagueStandings = <ThrowOnError extends boolean = false>(options: Options<FplApiGetClassicLeagueStandingsData, ThrowOnError>) => { return (options?.client ?? client).get<FplApiGetClassicLeagueStandingsResponse, FplApiGetClassicLeagueStandingsError, ThrowOnError>({
    ...options,
    url: '/fpl/classic_league_standings',
    responseTransformer: FplApiGetClassicLeagueStandingsResponseTransformer
}); };

/**
 * Get Gameweek Per Manager
 */
export const fplApiGetGameweekPerManager = <ThrowOnError extends boolean = false>(options: Options<FplApiGetGameweekPerManagerData, ThrowOnError>) => { return (options?.client ?? client).get<FplApiGetGameweekPerManagerResponse, FplApiGetGameweekPerManagerError, ThrowOnError>({
    ...options,
    url: '/fpl/gameweek_per_manager'
}); };

/**
 * Get Gameweek Per Manager Per Classic League
 */
export const fplApiGetGameweekPerManagerPerClassicLeague = <ThrowOnError extends boolean = false>(options: Options<FplApiGetGameweekPerManagerPerClassicLeagueData, ThrowOnError>) => { return (options?.client ?? client).get<FplApiGetGameweekPerManagerPerClassicLeagueResponse, FplApiGetGameweekPerManagerPerClassicLeagueError, ThrowOnError>({
    ...options,
    url: '/fpl/gameweek_per_manager_per_classic_league'
}); };

/**
 * Get Overall Gameweek Info
 */
export const fplApiGetOverallGameweekInfo = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<FplApiGetOverallGameweekInfoResponse, FplApiGetOverallGameweekInfoError, ThrowOnError>({
    ...options,
    url: '/fpl/overall_gameweek_info',
    responseTransformer: FplApiGetOverallGameweekInfoResponseTransformer
}); };

/**
 * Get User Leagues
 */
export const fplRewardsGetUserLeagues = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<FplRewardsGetUserLeaguesResponse, FplRewardsGetUserLeaguesError, ThrowOnError>({
    ...options,
    url: '/'
}); };

/**
 * Create League
 */
export const fplRewardsCreateLeague = <ThrowOnError extends boolean = false>(options: Options<FplRewardsCreateLeagueData, ThrowOnError>) => { return (options?.client ?? client).post<FplRewardsCreateLeagueResponse, FplRewardsCreateLeagueError, ThrowOnError>({
    ...options,
    url: '/'
}); };

/**
 * Join League
 */
export const fplRewardsJoinLeague = <ThrowOnError extends boolean = false>(options: Options<FplRewardsJoinLeagueData, ThrowOnError>) => { return (options?.client ?? client).post<FplRewardsJoinLeagueResponse, FplRewardsJoinLeagueError, ThrowOnError>({
    ...options,
    url: '/join'
}); };

/**
 * Create Prizes
 */
export const fplPrizesCreatePrizes = <ThrowOnError extends boolean = false>(options: Options<FplPrizesCreatePrizesData, ThrowOnError>) => { return (options?.client ?? client).post<FplPrizesCreatePrizesResponse, FplPrizesCreatePrizesError, ThrowOnError>({
    ...options,
    url: '/{league_id}'
}); };

/**
 * Get Prizes
 */
export const fplPrizesGetPrizes = <ThrowOnError extends boolean = false>(options: Options<FplPrizesGetPrizesData, ThrowOnError>) => { return (options?.client ?? client).get<FplPrizesGetPrizesResponse, FplPrizesGetPrizesError, ThrowOnError>({
    ...options,
    url: '/{league_id}'
}); };

/**
 * Update Prize
 */
export const fplPrizesUpdatePrize = <ThrowOnError extends boolean = false>(options: Options<FplPrizesUpdatePrizeData, ThrowOnError>) => { return (options?.client ?? client).put<FplPrizesUpdatePrizeResponse, FplPrizesUpdatePrizeError, ThrowOnError>({
    ...options,
    url: '/league/{league_id}/prize/{prize_id}'
}); };

/**
 * Delete Prize
 */
export const fplPrizesDeletePrize = <ThrowOnError extends boolean = false>(options: Options<FplPrizesDeletePrizeData, ThrowOnError>) => { return (options?.client ?? client).delete<FplPrizesDeletePrizeResponse, FplPrizesDeletePrizeError, ThrowOnError>({
    ...options,
    url: '/league/{league_id}/prize/{prize_id}'
}); };
// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import { client, authGetToken, fplApiGetClassicLeagueStandings, fplApiGetGameweekPerManager, fplApiGetGameweekPerManagerPerClassicLeague, fplApiGetOverallGameweekInfo, fplRewardsGetUserLeagues, fplRewardsCreateLeague, fplRewardsJoinLeague, fplPrizesCreatePrizes, fplPrizesGetPrizes, fplPrizesUpdatePrize, fplPrizesDeletePrize } from '../services.gen';
import type { FplApiGetClassicLeagueStandingsData, FplApiGetGameweekPerManagerData, FplApiGetGameweekPerManagerPerClassicLeagueData, FplRewardsCreateLeagueData, FplRewardsCreateLeagueError, FplRewardsCreateLeagueResponse, FplRewardsJoinLeagueData, FplRewardsJoinLeagueError, FplRewardsJoinLeagueResponse, FplPrizesCreatePrizesData, FplPrizesCreatePrizesError, FplPrizesCreatePrizesResponse, FplPrizesGetPrizesData, FplPrizesUpdatePrizeData, FplPrizesUpdatePrizeError, FplPrizesUpdatePrizeResponse, FplPrizesDeletePrizeData, FplPrizesDeletePrizeError, FplPrizesDeletePrizeResponse } from '../types.gen';

type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): QueryKey<TOptions>[0] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: client.getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return params;
};

export const authGetTokenQueryKey = (options?: Options) => [
    createQueryKey("authGetToken", options)
];

export const authGetTokenOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await authGetToken({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: authGetTokenQueryKey(options)
}); };

export const fplApiGetClassicLeagueStandingsQueryKey = (options: Options<FplApiGetClassicLeagueStandingsData>) => [
    createQueryKey("fplApiGetClassicLeagueStandings", options)
];

export const fplApiGetClassicLeagueStandingsOptions = (options: Options<FplApiGetClassicLeagueStandingsData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await fplApiGetClassicLeagueStandings({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: fplApiGetClassicLeagueStandingsQueryKey(options)
}); };

export const fplApiGetGameweekPerManagerQueryKey = (options: Options<FplApiGetGameweekPerManagerData>) => [
    createQueryKey("fplApiGetGameweekPerManager", options)
];

export const fplApiGetGameweekPerManagerOptions = (options: Options<FplApiGetGameweekPerManagerData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await fplApiGetGameweekPerManager({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: fplApiGetGameweekPerManagerQueryKey(options)
}); };

export const fplApiGetGameweekPerManagerPerClassicLeagueQueryKey = (options: Options<FplApiGetGameweekPerManagerPerClassicLeagueData>) => [
    createQueryKey("fplApiGetGameweekPerManagerPerClassicLeague", options)
];

export const fplApiGetGameweekPerManagerPerClassicLeagueOptions = (options: Options<FplApiGetGameweekPerManagerPerClassicLeagueData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await fplApiGetGameweekPerManagerPerClassicLeague({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: fplApiGetGameweekPerManagerPerClassicLeagueQueryKey(options)
}); };

export const fplApiGetOverallGameweekInfoQueryKey = (options?: Options) => [
    createQueryKey("fplApiGetOverallGameweekInfo", options)
];

export const fplApiGetOverallGameweekInfoOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await fplApiGetOverallGameweekInfo({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: fplApiGetOverallGameweekInfoQueryKey(options)
}); };

export const fplRewardsGetUserLeaguesQueryKey = (options?: Options) => [
    createQueryKey("fplRewardsGetUserLeagues", options)
];

export const fplRewardsGetUserLeaguesOptions = (options?: Options) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await fplRewardsGetUserLeagues({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: fplRewardsGetUserLeaguesQueryKey(options)
}); };

export const fplRewardsCreateLeagueQueryKey = (options: Options<FplRewardsCreateLeagueData>) => [
    createQueryKey("fplRewardsCreateLeague", options)
];

export const fplRewardsCreateLeagueOptions = (options: Options<FplRewardsCreateLeagueData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await fplRewardsCreateLeague({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: fplRewardsCreateLeagueQueryKey(options)
}); };

export const fplRewardsCreateLeagueMutation = () => { const mutationOptions: UseMutationOptions<FplRewardsCreateLeagueResponse, FplRewardsCreateLeagueError, Options<FplRewardsCreateLeagueData>> = {
    mutationFn: async (options) => {
        const { data } = await fplRewardsCreateLeague({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const fplRewardsJoinLeagueQueryKey = (options: Options<FplRewardsJoinLeagueData>) => [
    createQueryKey("fplRewardsJoinLeague", options)
];

export const fplRewardsJoinLeagueOptions = (options: Options<FplRewardsJoinLeagueData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await fplRewardsJoinLeague({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: fplRewardsJoinLeagueQueryKey(options)
}); };

export const fplRewardsJoinLeagueMutation = () => { const mutationOptions: UseMutationOptions<FplRewardsJoinLeagueResponse, FplRewardsJoinLeagueError, Options<FplRewardsJoinLeagueData>> = {
    mutationFn: async (options) => {
        const { data } = await fplRewardsJoinLeague({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const fplPrizesCreatePrizesQueryKey = (options: Options<FplPrizesCreatePrizesData>) => [
    createQueryKey("fplPrizesCreatePrizes", options)
];

export const fplPrizesCreatePrizesOptions = (options: Options<FplPrizesCreatePrizesData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await fplPrizesCreatePrizes({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: fplPrizesCreatePrizesQueryKey(options)
}); };

export const fplPrizesCreatePrizesMutation = () => { const mutationOptions: UseMutationOptions<FplPrizesCreatePrizesResponse, FplPrizesCreatePrizesError, Options<FplPrizesCreatePrizesData>> = {
    mutationFn: async (options) => {
        const { data } = await fplPrizesCreatePrizes({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const fplPrizesGetPrizesQueryKey = (options: Options<FplPrizesGetPrizesData>) => [
    createQueryKey("fplPrizesGetPrizes", options)
];

export const fplPrizesGetPrizesOptions = (options: Options<FplPrizesGetPrizesData>) => { return queryOptions({
    queryFn: async ({ queryKey }) => {
        const { data } = await fplPrizesGetPrizes({
            ...options,
            ...queryKey[0],
            throwOnError: true
        });
        return data;
    },
    queryKey: fplPrizesGetPrizesQueryKey(options)
}); };

export const fplPrizesUpdatePrizeMutation = () => { const mutationOptions: UseMutationOptions<FplPrizesUpdatePrizeResponse, FplPrizesUpdatePrizeError, Options<FplPrizesUpdatePrizeData>> = {
    mutationFn: async (options) => {
        const { data } = await fplPrizesUpdatePrize({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };

export const fplPrizesDeletePrizeMutation = () => { const mutationOptions: UseMutationOptions<FplPrizesDeletePrizeResponse, FplPrizesDeletePrizeError, Options<FplPrizesDeletePrizeData>> = {
    mutationFn: async (options) => {
        const { data } = await fplPrizesDeletePrize({
            ...options,
            throwOnError: true
        });
        return data;
    }
}; return mutationOptions; };